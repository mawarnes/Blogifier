@using ChartJs.Blazor
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.BarChart
@using System.Drawing

@inject HttpClient _http
@inject IStringLocalizer<Resource> _localizer

<div class="app-widget-card p-3">
	<Chart Config="_config"></Chart>
</div>

@code {
    private BarConfig _config;

    protected override async Task OnInitializedAsync()
    {
        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Position = Position.Top
                }
            }
        };

        IDataset<int> dataset = new BarDataset<int>()
        {
            Label = "Latest Post Views",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(121, 26, 230)),
            BorderWidth = 0
        };

        var model = await _http.GetFromJsonAsync<AnalyticsModel>("api/analytics");

        if(model == null || model.LatestPostViews == null)
        {
            LoadData(dataset, TestData());
        }
        else
        {
            LoadData(dataset, model.LatestPostViews);
        }
        _config.Data.Datasets.Add(dataset);
    }

    protected void LoadData(IDataset<int> dataset, BarChartModel model)
    {
        foreach (var label in model.Labels)
        {
            _config.Data.Labels.Add(label);
        }
        foreach (var item in model.Data)
        {
            dataset.Add(item);
        }
    }

    protected BarChartModel TestData()
    {
        return new BarChartModel()
        {
            Labels = new List<string>() { "Post One", "Post Two", "Post Three", "Post Four", "Post Five", "Post Six" },
            Data = new List<int>() { 12036, 15350, 9457, 11104, 7938, 8136 }
        };
    }
}
