@layout NewsletterLayout
@page "/admin/newsletter/subscribers/"
@inject HttpClient _http
@inject IStringLocalizer<Resource> _localizer

<h1 class="app-section-title">Newesletter Subscribers</h1>
<div class="app-section-content mw-100">

    @if (Subscribers == null || Subscribers.Count == 0)
    {
        <p class="app-section-desc">@_localizer["not-found"]</p>
    }
    else
    {
        <ul class="app-list mt-3">

            @foreach (var subscriber in Subscribers)
            {
                <li class="app-list-item d-flex">
                    @{
                        string title = $"{subscriber.Email} / {subscriber.Country} / {subscriber.Region} / {subscriber.Ip}";
                        string pubDate = subscriber.DateCreated.ToFriendlyDateTimeString();
                    }
                    <span class="app-list-title">@title</span>
                    <span class="app-list-text ms-3">@pubDate</span>
                    <button class="app-list-btn ms-3" @onclick="(async () => await RemoveSubscription(subscriber.Id))" title="Remove">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash text-danger" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                        </svg>
                    </button>
                </li>
            }
        </ul>
    }
</div>
<ToasterComponent @ref="Toaster" />

@code {
    protected ToasterComponent Toaster;
    protected List<Subscriber> Subscribers;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    protected async Task Load()
    {
        Subscribers = await _http.GetFromJsonAsync<List<Subscriber>>($"api/newsletter/subscribers");
    }

    protected async Task RemoveSubscription(int id)
    {
        Toaster.Toast(await _http.DeleteAsync($"api/newsletter/unsubscribe/{id}"));
        await Load();
    }
}