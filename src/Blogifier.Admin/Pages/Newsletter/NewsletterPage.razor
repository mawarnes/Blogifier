@layout NewsletterLayout
@page "/admin/newsletter/"
@inject HttpClient _http
@inject IStringLocalizer<Resource> _localizer
@inject IToaster _toaster

<h1 class="app-section-title">Newesletters</h1>
<div class="app-section-content mw-100">
    @if (Newsletters == null || Newsletters.Count == 0)
    {

        <p class="app-section-desc">@_localizer["not-found"]</p>

    }
    else
    {
        <ul class="app-list">
            @foreach (var newsletter in Newsletters)
            {
                <li class="app-list-item d-flex">
                    @{
                        string title = $"{newsletter.Post.Title}";
                        string pubDate = newsletter.DateCreated.ToLocalTime().ToFriendlyDateTimeString();
                        string pubStatus = newsletter.Success ? "published" : "draft";
                    }
                    <span class="app-list-title">@title</span>
                    <button class="app-list-btn ms-3" @onclick="(async () => await Resend(newsletter.PostId))" data-toggle="tooltip" title="Resend">
                        @if (@pubStatus == "published")
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle text-success" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z" />
                            </svg>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash-circle text-warning" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z" />
                            </svg>
                        }
                    </button>
                    <span class="app-list-text ms-3">@pubDate</span>
                    <button class="app-list-btn ms-3" @onclick="(async () => await RemoveNewsletter(newsletter.Id))" title="Remove">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash text-danger" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                        </svg>
                    </button>
                </li>
            }
        </ul>
    }
</div>
<ToasterComponent @ref="Toaster" />

@code {
    protected ToasterComponent Toaster;
    protected List<Newsletter> Newsletters;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    protected async Task Load()
    {
        Newsletters = await _http.GetFromJsonAsync<List<Newsletter>>($"api/newsletter/newsletters");
    }

    protected async Task RemoveNewsletter(int id)
    {
        Toaster.Toast(await _http.DeleteAsync($"api/newsletter/remove/{id}"));
        await Load();
    }

    protected async Task Resend(int postId)
    {
        bool success = await _http.GetFromJsonAsync<bool>($"api/newsletter/send/{postId}");
        if (success)
            _toaster.Success(_localizer["completed"]);
        else
            _toaster.Error(_localizer["generic-error"]);
        await Load();
    }
}